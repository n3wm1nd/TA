#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, body, rleg, lleg, backholder, backbarrels, elevator,
       holder, barrels, lflare, rflare, ldoor, rdoor;

static-var  gun_2, bMoving, Static_Var_3, Static_Var_4, restore_delay,
            Static_Var_6, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from holder;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

walk()
{
	if( TRUE )
	{
		move pelvis to y-axis [0.000000] now;
		move lleg to y-axis [0.000000] now;
		move lleg to z-axis [1.800000] now;
		move rleg to y-axis [0.000000] now;
		move rleg to z-axis [-1.600000] now;
		turn pelvis to x-axis <3.000000> now;
		turn lleg to x-axis <-6.000000> now;
		turn rleg to x-axis <0.000000> now;
		sleep 60;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.500000] now;
		move lleg to y-axis [0.500000] now;
		move rleg to y-axis [0.500000] now;
		turn pelvis to x-axis <2.000000> now;
		turn lleg to x-axis <-4.890110> now;
		turn rleg to x-axis <1.093407> now;
		sleep 30;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.300000] now;
		move lleg to y-axis [0.300000] now;
		move rleg to y-axis [0.300000] now;
		turn pelvis to x-axis <2.093407> now;
		turn lleg to x-axis <-2.093407> now;
		turn rleg to x-axis <2.791209> now;
		sleep 20;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.100000] now;
		move lleg to y-axis [0.100000] now;
		move rleg to y-axis [0.100000] now;
		turn pelvis to x-axis <1.093407> now;
		turn lleg to x-axis <-1.000000> now;
		turn rleg to x-axis <3.192308> now;
		sleep 10;
	}
	if( TRUE )
	{
		move pelvis to y-axis [0.000000] now;
		move lleg to y-axis [0.000000] now;
		move rleg to y-axis [1.100000] now;
		move rleg to z-axis [-1.900000] now;
		turn pelvis to x-axis <0.000000> now;
		turn lleg to x-axis <0.000000> now;
		turn rleg to x-axis <0.000000> now;
		sleep 60;
	}
	if( TRUE )
	{
		move lleg to z-axis [1.000000] now;
		move rleg to z-axis [-0.300000] now;
		sleep 60;
	}
	if( TRUE )
	{
		move lleg to y-axis [0.000000] now;
		move lleg to z-axis [0.000000] now;
		move rleg to z-axis [0.000000] now;
		turn pelvis to x-axis <0.000000> now;
		turn lleg to x-axis <0.000000> now;
		turn rleg to x-axis <0.000000> now;
		sleep 60;
	}
	if( TRUE )
	{
		move lleg to z-axis [-0.600000] now;
		move rleg to z-axis [0.800000] now;
		turn rleg to x-axis <-9.093407> now;
		sleep 100;
	}
	if( TRUE )
	{
		move lleg to z-axis [-1.200000] now;
		move rleg to y-axis [0.000000] now;
		turn pelvis to x-axis <3.000000> now;
		turn rleg to x-axis <-6.000000> now;
		sleep 60;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.500000] now;
		move lleg to y-axis [0.500000] now;
		move rleg to y-axis [0.500000] now;
		turn pelvis to x-axis <2.000000> now;
		turn lleg to x-axis <0.692308> now;
		turn rleg to x-axis <-4.890110> now;
		sleep 30;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.300000] now;
		move lleg to y-axis [0.300000] now;
		move rleg to y-axis [0.300000] now;
		turn pelvis to x-axis <1.093407> now;
		turn lleg to x-axis <2.791209> now;
		turn rleg to x-axis <-2.093407> now;
		sleep 20;
	}
	if( TRUE )
	{
		move pelvis to y-axis [-0.100000] now;
		move lleg to y-axis [0.100000] now;
		move rleg to y-axis [0.100000] now;
		turn pelvis to x-axis <1.000000> now;
		turn lleg to x-axis <2.500000> now;
		turn rleg to x-axis <-1.000000> now;
		sleep 10;
	}
	if( TRUE )
	{
		move lleg to y-axis [1.100000] now;
		move lleg to z-axis [-1.600000] now;
		move rleg to y-axis [0.100000] now;
		turn pelvis to x-axis <0.000000> now;
		turn lleg to x-axis <0.000000> now;
		turn rleg to x-axis <0.000000> now;
		sleep 60;
	}
	if( TRUE )
	{
		move lleg to z-axis [-0.700000] now;
		move rleg to z-axis [0.200000] now;
		sleep 60;
	}
	if( TRUE )
	{
		move lleg to z-axis [0.500000] now;
		move rleg to y-axis [0.000000] now;
		move rleg to z-axis [-0.300000] now;
		turn rleg to x-axis <0.000000> now;
		sleep 60;
	}
	move lleg to z-axis [1.000000] now;
	move rleg to y-axis [0.000000] now;
	move rleg to z-axis [-1.300000] now;
	turn lleg to x-axis <-10.192308> now;
	turn rleg to x-axis <0.000000> now;
	sleep 100;
}

stand()
{
	sleep 250;
}

MotionControl(Func_Var_1, Func_Var_2)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		Func_Var_2 = Static_Var_3;
		if( Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				Static_Var_4 = 1;
				call-script walk();
			}
			if( !Func_Var_2 )
			{
				Static_Var_4 = 0;
				call-script walk();
			}
		}
		if( !Func_Var_1 )
		{
			Static_Var_4 = 1;
			call-script stand();
		}
		sleep 60;
	}
}

open()
{
	show holder;
	show elevator;
	turn backholder to x-axis <90.000000> speed <370.000000>;
	turn ldoor to z-axis <-150.000000> speed <370.000000>;
	turn rdoor to z-axis <150.000000> speed <370.000000>;
	wait-for-turn ldoor around z-axis;
	move backbarrels to y-axis [4.250000] speed [120.000000];
	move elevator to y-axis [2.500000] speed [90.000000];
	wait-for-move elevator along y-axis;
	show barrels;
	hide backbarrels;
	turn backholder to x-axis <0.000000> speed <270.000000>;
}

close()
{
	turn backholder to x-axis <90.000000> speed <180.000000>;
	wait-for-turn backholder around x-axis;
	show backbarrels;
	hide barrels;
	move backbarrels to y-axis [0.000000] speed [40.000000];
	move elevator to y-axis [0.000000] speed [30.000000];
	wait-for-move elevator along y-axis;
	turn ldoor to z-axis <0.000000> speed <180.000000>;
	turn rdoor to z-axis <0.000000> speed <180.000000>;
	turn backholder to x-axis <0.000000> speed <180.000000>;
	wait-for-turn ldoor around z-axis;
	hide elevator;
	hide holder;
}

Go()
{
	Static_Var_3 = 1;
	call-script open();
	Static_Var_6 = 1;
}

Stop()
{
	Static_Var_6 = 0;
	call-script close();
	Static_Var_3 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	bMoving = FALSE;
	Static_Var_3 = 0;
	Static_Var_4 = 1;
	Static_Var_6 = 0;
	gun_2 = base;
	restore_delay = 6000;
	hide barrels;
	hide elevator;
	hide holder;
	call-script InitState();
	start-script SmokeUnit();
	start-script MotionControl();
}

SetMaxReloadTime(Func_Var_1)
{
	//restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn holder to y-axis <0.000000> speed <120.000000>;
	turn barrels to x-axis <0.000000> speed <90.000000>;
	wait-for-turn holder around y-axis;
	wait-for-turn barrels around x-axis;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_6 )
	{
		sleep 250;
	}
	turn holder to y-axis heading speed <260.000000>;
	turn barrels to x-axis <0.000000> - pitch speed <350.000000>;
	wait-for-turn holder around y-axis;
	wait-for-turn barrels around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_2 = 1 - gun_2;
}

AimFromPrimary(piecenum)
{
	piecenum = barrels;
}

QueryPrimary(piecenum)
{
	piecenum = lflare;
}

AimSecondary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	while( !Static_Var_6 )
	{
		sleep 250;
	}
	turn holder to y-axis heading speed <260.000000>;
	turn barrels to x-axis <0.000000> - pitch speed <350.000000>;
	wait-for-turn holder around y-axis;
	wait-for-turn barrels around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	gun_2 = 1 - gun_2;
}

AimFromSecondary(piecenum)
{
	piecenum = barrels;
}

QuerySecondary(piecenum)
{
	piecenum = rflare;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	explode pelvis type BITMAPONLY | BITMAP5;
	explode lleg type BITMAPONLY | BITMAP3;
	explode rleg type BITMAPONLY | BITMAP3;
	explode backbarrels type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode holder type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	explode ldoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rdoor type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode barrels type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	corpsetype = 3;
	return (corpsetype);
}
