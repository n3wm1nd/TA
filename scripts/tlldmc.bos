#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, Turretbase, Turret, Gun, B2, B1, Flare;

static-var  Static_Var_1, WeaponToggle;

// Signal definitions
#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Turret;
			emit-sfx smoketype from Turretbase;
			emit-sfx smoketype from Gun;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Dive()
{
	WeaponToggle = !WeaponToggle;
	//get PRINT(WeaponToggle);
}

Create()
{
	WeaponToggle = 1;
	hide Flare;
	Static_Var_1 = 2500;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
}

AimPrimary(heading, pitch)
{
    if(!WeaponToggle OR (get WEAPON_RELOADSTATE(2) > get GAME_FRAME)) return 0;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn Turret to y-axis heading speed <30.000000>;
	turn Gun to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn Turret around y-axis;
	wait-for-turn Gun around x-axis;
	return (1);
}

FirePrimary()
{
	move B1 to z-axis [-7.500000] speed [500.000000];
	move B2 to z-axis [-4.000000] speed [500.000000];
	wait-for-move B1 along z-axis;
	emit-sfx 1024 + 0 from Flare;
	sleep 200;
	move B1 to z-axis [0.000000] speed [3.500000];
	move B2 to z-axis [0.000000] speed [3.500000];
}

QueryPrimary(piecenum)
{
	piecenum = Flare;
}

AimFromPrimary(piecenum)
{
	piecenum = Turret;
}

AimSecondary(heading, pitch)
{
	if(WeaponToggle OR (get WEAPON_RELOADSTATE(1) > get GAME_FRAME)) return 0;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn Turret to y-axis heading speed <30.000000>;
	turn Gun to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn Turret around y-axis;
	wait-for-turn Gun around x-axis;
	return (1);
}

FireSecondary()
{
	move B1 to z-axis [-7.500000] speed [500.000000];
	move B2 to z-axis [-4.000000] speed [500.000000];
	wait-for-move B1 along z-axis;
	emit-sfx 1024 + 0 from Flare;
	sleep 200;
	move B1 to z-axis [0.000000] speed [3.500000];
	move B2 to z-axis [0.000000] speed [3.500000];
}

QuerySecondary(piecenum)
{
	piecenum = Flare;
}

AimFromSecondary(piecenum)
{
	piecenum = Turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide Flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode B1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode Flare type NOHEATCLOUD;
		explode Gun type NOHEATCLOUD;
		explode Turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode B1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode Flare type NOHEATCLOUD | FALL;
		explode Gun type NOHEATCLOUD | SHATTER;
		explode Turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode B1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode Flare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode Gun type NOHEATCLOUD | SHATTER;
		explode Turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode B1 type NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode Flare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Gun type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode Turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}