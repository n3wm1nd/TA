#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, lock, door2, tube1, tube2, tube3, tube4,
       rocket;

static-var  Static_Var_1, restore_delay, gun_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	set ARMORED to 0;
	move lock to x-axis [-4.000000] speed [25.000000];
	wait-for-move lock along x-axis;
	turn door1 to z-axis <90.021978> speed <75.000000>;
	turn door2 to z-axis <-90.021978> speed <75.000000>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around z-axis;
	move door1 to y-axis [-4.000000] speed [25.000000];
	move door2 to y-axis [-4.000000] speed [25.000000];
	wait-for-move door1 along y-axis;
	wait-for-move door2 along y-axis;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	move door1 to y-axis [0.000000] speed [25.000000];
	move door2 to y-axis [0.000000] speed [25.000000];
	wait-for-move door1 along y-axis;
	wait-for-move door2 along y-axis;
	turn door1 to z-axis <0.000000> speed <75.000000>;
	turn door2 to z-axis <0.000000> speed <75.000000>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around z-axis;
	move lock to x-axis [0.000000] speed [25.000000];
	wait-for-move lock along x-axis;
	set ARMORED to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide rocket;
	dont-shade door1;
	dont-shade door2;
	restore_delay = 3000;
	Static_Var_1 = 0;
	gun_1 = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	call-script InitState();
	start-script SmokeUnit();
	set ARMORED to 1;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	var Func_Var_3;
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 5 )
	{
		gun_1 = 1;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = tube1;
	}
	if( gun_1 == 2 )
	{
		piecenum = tube2;
	}
	if( gun_1 == 3 )
	{
		piecenum = tube3;
	}
	if( gun_1 == 4 )
	{
		piecenum = tube4;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide tube1;
	hide tube2;
	hide tube3;
	hide tube4;
	show rocket;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lock type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode rocket type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lock type BITMAPONLY | BITMAP1;
		explode base type SHATTER | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode rocket type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lock type BITMAPONLY | BITMAP2;
		explode base type SHATTER | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode rocket type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode lock type BITMAPONLY | BITMAP2;
	explode base type SHATTER | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP2;
	explode door2 type BITMAPONLY | BITMAP2;
	explode rocket type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
