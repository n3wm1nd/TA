#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, top, cutterhead, leg1, leg2, leg3, leg4, leg5, emit1, emit2,
	   emit3, emit4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Shudder()
{
while( TRUE )
	{
		move cutterhead to y-axis [-1.000000] speed [800.000000];
		move top to y-axis [-13.0000] speed [1375.000000];
		sleep 100;
		move cutterhead to y-axis [0.000000] speed [800.000000];
		move top to y-axis [-12.800000] speed [1375.000000];
		sleep 100;
	}
}

Go()
{

	move top to y-axis [-12.000000] speed [20.000000];
	spin cutterhead around y-axis speed Static_Var_1 accelerate Static_Var_2;
	set ARMORED to 1;
	sleep 1000;
	start-script Shudder();
	while( TRUE )
	{
		//move top to y-axis [-14.000000] speed [45.000000];
		//emit-sfx 256 | 2 from emit4;
		emit-sfx 1024 + 0 from emit1;
		emit-sfx 1024 + 0 from emit2;
		emit-sfx 1024 + 0 from emit3;
		sleep 222;
		//move top to y-axis [-13.000000] speed [45.000000];
	}
}

Stop()
{

	stop-spin cutterhead around y-axis decelerate Static_Var_3;
	set ARMORED to 0;
	wait-for-turn cutterhead around y-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	move top to y-axis [0.000000] now;
	Static_Var_1 = 0;
	Static_Var_2 = 100;
	Static_Var_3 = 500;
	set ARMORED to 0;
	//call-script Shudder();
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 1;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode cutterhead type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode cutterhead type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode cutterhead type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode cutterhead type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
