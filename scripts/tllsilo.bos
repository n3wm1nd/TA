#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, missile, plat, arm1, arm2, door1, door2,
       flare, p1, p2, motor;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		turn door1 to x-axis <130.000000> speed <80.000000>;
		turn door2 to x-axis <-130.000000> speed <80.000000>;
		sleep 900;
	}
	if( TRUE )
	{
		move plat to y-axis [18.000000] speed [12.000000];
		sleep 500;
	}
	if( TRUE )
	{
		turn arm1 to x-axis <-35.000000> speed <40.000000>;
		turn arm2 to x-axis <35.000000> speed <40.000000>;
	}
	emit-sfx 1024 from motor;
	sleep 1300;
}

deactivatescr()
{
	if( TRUE )
	{
		turn arm1 to x-axis <0.000000> speed <100.000000>;
		turn arm2 to x-axis <0.000000> speed <100.000000>;
		sleep 500;
	}
	if( TRUE )
	{
		move plat to y-axis [0.000000] speed [13.000000];
		sleep 1000;
	}
	if( TRUE )
	{
		turn door1 to x-axis <0.000000> speed <80.000000>;
		turn door2 to x-axis <0.000000> speed <80.000000>;
	}
	sleep 10000;
}

HitByWeapon(anglex, anglez)
{
	var Func_Var_3;
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			hide p1;
			explode p1 type FALL | SHATTER | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_6 == 0 )
		{
			Static_Var_6 = 1;
			hide p2;
			explode p2 type FALL | SHATTER | SMOKE | BITMAP2;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 60 )
		{
			if( Static_Var_6 == 1 )
			{
				Static_Var_6 = 0;
				show p2;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_5 == 1 )
			{
				Static_Var_5 = 0;
				show p1;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set ARMORED to 0;
	dont-cache door1;
	dont-cache door2;
	dont-cache missile;
	dont-cache plat;
	dont-cache arm1;
	dont-cache arm2;
	show missile;
	call-script activatescr();
	gun_1 = body;
}

Stop()
{
	gun_1 = base;
	sleep 4000;
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache missile;
	cache plat;
	cache arm1;
	cache arm2;
	set ARMORED to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade missile;
	dont-shade plat;
	dont-shade arm1;
	dont-shade arm2;
	dont-shade body;
	dont-shade p2;
	dont-shade p1;
	hide flare;
	gun_1 = base;
	restore_delay = 300;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 250;
		start-script RequestState(0);
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = base;
	hide missile;
	emit-sfx 1024 from motor;
	sleep 2000;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = missile;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode missile type BITMAPONLY | BITMAP1;
		explode plat type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type SHATTER | BITMAP1;
		explode door1 type FALL | BITMAP4;
		explode door2 type FALL | BITMAP5;
		explode missile type BITMAPONLY | BITMAP1;
		explode plat type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode missile type BITMAPONLY | BITMAP1;
		explode plat type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode arm1 type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode missile type BITMAPONLY | BITMAP1;
	explode plat type BITMAPONLY | BITMAP2;
	return (corpsetype);
}
